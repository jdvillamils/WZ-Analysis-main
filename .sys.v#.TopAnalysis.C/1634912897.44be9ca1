#define TopAnalysis_cxx
// The following methods are defined in this file:
//    Begin():        called every time a loop on the tree starts,
//                    a convenient place to create your histograms.
//    SlaveBegin():   called after Begin(), when on PROOF called only on the
//                    slave servers.
//    Process():      called for each event, in this function you decide what
//                    to read and fill your histograms.
//    SlaveTerminate: called at the end of the loop on the tree, when on PROOF
//                    called only on the slave servers.
//    Terminate():    called at the end of the loop on the tree,
//                    a convenient place to draw/fit your histograms.

#include "TopAnalysis.h"
#include "Tophistograms.h"
#include <iostream>
#include <cstring>
#include <string>

#include <TH1.h>
#include <TH2.h>
#include <TStyle.h>
#include <TMath.h>
#include <TLorentzVector.h>

string name;

void TopAnalysis::Begin(TTree * )
{
  // The Begin() function is called at the start of the query.
  // When running with PROOF Begin() is only called on the client.
  // The tree argument is deprecated (on PROOF 0 is passed).
}

void TopAnalysis::SlaveBegin(TTree * )
{
    // The SlaveBegin() function is called after the Begin() function.
  // When running with PROOF SlaveBegin() is called on each slave server.
  // The tree argument is deprecated (on PROOF 0 is passed).

  TString option = GetOption();
  printf("Starting analysis with process option: %s \n", option.Data());

  name=option;

  define_histograms();

  FillOutputList();
}

Bool_t TopAnalysis::Process(Long64_t entry)
{
        // The Process() function is called for each entry in the tree (or possibly
    // keyed object in the case of PROOF) to be processed. The entry argument
    // specifies which entry in the currently loaded tree is to be processed.
  // When processing keyed objects with PROOF, the object is already loaded
  // and is available via the fObject pointer.
  //
  // This function should contain the \"body\" of the analysis. It can contain
  // simple or elaborate selection criteria, run algorithms on the data
  // of the event and typically fill histograms.
  //
  // The processing can be stopped by calling Abort().
  //
  // Use fStatus to set the return value of TTree::Process().
  //
  // The return value is currently not used.
    
    fChain->GetTree()->GetEntry(entry);
    int cut1 = 0;
    int cut2 = 0;
    int cut3 = 0;
    int cut4 = 0;
    int cut5 = 0;
    int cut6 = 0;

    if(fChain->GetTree()->GetEntries()>0)
    {
        //Do analysis
        //SF
        Float_t scaleFactor = scaleFactor_ELE*scaleFactor_MUON*scaleFactor_TRIGGER;
        //EventW
        Float_t eventWeight = mcWeight*scaleFactor_PILEUP*scaleFactor_ZVERTEX;
        //weight = SF * EventW
        Double_t weight = scaleFactor*eventWeight;

        // Make difference between data and MC
        if (weight == 0. && channelNumber != 110090 && channelNumber != 110091) weight = 1.;
        // Missing Et of the event in GeV
        Float_t missingEt = met_et/1000.;


        // Preselection cut for electron/muon trigger, Good Run List, and good vertex
        if(trigE || trigM) //Trigger of electron or muon is satisfied
        {
            cut1++;
            hist_cutflow->Fill(1);
            
            if(passGRL) //Pass the Good Run List
            {
                
                cut2++;
                hist_cutflow->Fill(2);
               
                if(hasGoodVertex)
                {
                    cut3++;
                    hist_cutflow->Fill(3);
            
                    //Find the good leptons
                    //int goodlep_index = 0;
                    int goodlep_n = 0;
                    //int lep_index = 0;
                    int countlep[lep_n];
         
                    for(int i=0; i<lep_n; i++)
                    {
                        if(lep_pt[i]>25000. && ((lep_ptcone30[i]/lep_pt[i]) < 0.15) && ((lep_etcone20[i]/lep_pt[i]) < 0.15))
                        {
                            // electron selection in fiducial region excluding candidates in the transition region between the barrel and endcap electromagnetic calorimeters
                            if ( lep_type[i]==11 && TMath::Abs(lep_eta[i]) < 2.47 && ( TMath::Abs(lep_eta[i]) < 1.37 || TMath::Abs(lep_eta[i]) > 1.52 ) )
                            {
                                countlep[goodlep_n]=i;
                                goodlep_n++;
                                //goodlep_index = i;
                                //lep_index++;
                            }
                            //Muon selection
                            if ( lep_type[i] == 13 && TMath::Abs(lep_eta[i]) < 2.5 )
                            {
                                countlep[goodlep_n]=i;
                                goodlep_n++;
                                //goodlep_index = i;
                                //lep_index++;
                            }
                        }
                    }
                    
                    //Choosing the three good leptons passing below conditions
                    if(goodlep_n==3)
                    {
                        cut4++;
                        hist_cutflow->Fill(4);
                        
                        TLorentzVector lep1 = TLorentzVector ();
                        TLorentzVector lep2 = TLorentzVector ();
                        TLorentzVector lep3 = TLorentzVector ();
                        
                        int goodlep1=0;
                        int goodlep2=0;
                        int goodlep3=0;
                        
                        goodlep1=countlep[0];
                        goodlep2=countlep[1];
                        goodlep3=countlep[2];
                        
                        
                        lep1.SetPtEtaPhiE(lep_pt[goodlep1], lep_eta[goodlep1], lep_phi[goodlep1], lep_E[goodlep1]);
                        
                        lep2.SetPtEtaPhiE(lep_pt[goodlep2], lep_eta[goodlep2], lep_phi[goodlep2], lep_E[goodlep2]);
                        
                        lep3.SetPtEtaPhiE(lep_pt[goodlep3], lep_eta[goodlep3], lep_phi[goodlep3], lep_E[goodlep3]);
                          
                        float mass_lep1 = 0;
                        float mass_lep2 = 0;
                        float mass_lep3 = 0;
                        //Compute the lepton's mass (GeV)
                        mass_lep1 = lep1.M()/1000.;
                        mass_lep2 = lep2.M()/1000.;
                        mass_lep3 = lep3.M()/1000.;

                        int goodlepa = 0;
                        int goodlepb = 0;//goodlepa and goodlepb correspond to the SFOS-pair
                        int goodlepc = 0;

                        //search for the pair of leptons (SFOS-pair)
                        if(mass_lep1 == mass_lep2 && lep_charge[goodlep1] == -lep_charge[goodlep2]){goodlepa=goodlep1, goodlepb=goodlep2, goodlepc=goodlep3;}
                        if(mass_lep1 == mass_lep3 && lep_charge[goodlep1] == -lep_charge[goodlep3]){goodlepa=goodlep1, goodlepb=goodlep3, goodlepc=goodlep2;}
                        if(mass_lep2 == mass_lep3 && lep_charge[goodlep2] == -lep_charge[goodlep3]){goodlepa=goodlep2, goodlepb=goodlep3, goodlepc=goodlep1;}
              
                        //Z selection (always with the SFOS-pair)
                        TLorentzVector l1 = TLorentzVector ();
                        l1.SetPtEtaPhiE(lep_pt[goodlepa], lep_eta[goodlepa], lep_phi[goodlepa], lep_E[goodlepa]);
                        TLorentzVector l2 = TLorentzVector ();
                        l2.SetPtEtaPhiE(lep_pt[goodlepb], lep_eta[goodlepb], lep_phi[goodlepb], lep_E[goodlepb]);

                        //SFOS-pair mass (GeV)
                        //float mll=0;
                        TLorentzVector mlll = TLorentzVector ();
                        
                        mlll=(l1+l2);
                        
                        mll=mlll.M()/1000.;
                      
                        std::cout<<mll<<std::endl;
                        //hist_Zmasss->Fill(mll,weight);
                        
                        //So, check for the closest candidat
                        
                        //if(TMath::Abs(mll-91.18)<101.18 && TMath::Abs(mll-91.18)>81.18 )
                        
                        if(TMath::Abs(mll-91.18)<10.)
                        {
                            hist_Zmass->Fill(mll, weight);
                            cut5++;
                            hist_cutflow->Fill(5);
                            
                            
                            //Now were gonna see mtw
                        
                            //First, define the last lepton Tlorentz vector
                            TLorentzVector l3 = TLorentzVector();
                            l3.SetPtEtaPhiE(lep_pt[goodlepc], lep_eta[goodlepc], lep_phi[goodlepc],lep_E[goodlepc]);
                            //And missing ET Tlorentz vector
                            TLorentzVector MeT = TLorentzVector();
                            MeT.SetPtEtaPhiE(met_et, 0, met_phi , met_et);
                        
                            //So MTW results
                        
                            float MTW = 0;
                            MTW=sqrt(2*l3.Pt()*MeT.Et()*(1-cos(l3.DeltaPhi(MeT))));
                            //hist_Wmasss->Fill(MTW,weight);
                        
                            //Check MTW
                            
                            if(MTW > 30000.)
                            {
                                
                                hist_Wmass->Fill(MTW, weight);
                                cut6++;
                                hist_cutflow->Fill(6);
                                
                                
                                
                                // Plot all the distributions
                                double names_of_global_variable[]={missingEt, vxp_z, (double)pvxp_n, mll, MTW};
                                
                                double names_of_leadlep_variable[]={l3.Pt()/1000., l3.Eta(), l3.E()/1000.,l3.Phi(),lep_charge[goodlepa], (double)lep_type[goodlepa], lep_ptcone30[goodlepa], lep_etcone20[goodlepa], lep_z0[goodlepa], lep_trackd0pvunbiased[goodlepa], lep_charge[goodlepb], (double)lep_type[goodlepb], lep_ptcone30[goodlepb], lep_etcone20[goodlepb], lep_z0[goodlepb], lep_trackd0pvunbiased[goodlepb]};
                                
                                TString histonames_of_global_variable[]={"hist_etmiss","hist_vxp_z","hist_pvxp_n", "hist_Zmass", "hist_Wmass"};
                                TString histonames_of_leadlep_variable[]={"hist_leadleptpt", "hist_leadlepteta","hist_leadleptE","hist_leadleptphi","hist_leadleptch","hist_leadleptID","hist_leadlept_ptc","hist_leadleptetc","hist_leadlepz0","hist_leadlepd0","hist_leadleptch2","hist_leadleptID2","hist_leadlept_ptc2","hist_leadleptetc2","hist_leadlepz02","hist_leadlepd02"};
                  
                                int length_global = sizeof(names_of_global_variable)/sizeof(names_of_global_variable[0]);
                                int length_leadlep = sizeof(names_of_leadlep_variable)/sizeof(names_of_leadlep_variable[0]);
                                
                                for (int i=0; i<length_global; i++)
                                {
                                    FillHistogramsGlobal( names_of_global_variable[i], weight, histonames_of_global_variable[i]);
                                }
                      
                                for (int i=0; i<length_leadlep; i++)
                                {
                                    FillHistogramsLeadlept( names_of_leadlep_variable[i], weight, histonames_of_leadlep_variable[i]);
                                }
                            }  
                        }  
                    }
                }
            }
        }
    }
   /*{ 
    std::cout << "Done!" << std::endl;
    std::cout << "Cut1:" << cut1 << std::endl;
    std::cout << "Cut2:" << cut2 << std::endl;
    std::cout << "Cut3:" << cut3 << std::endl;
    std::cout << "Cut4:" << cut4 << std::endl;
    std::cout << "Cut5:" << cut5 << std::endl;
    std::cout << "Cut6:" << cut6 << std::endl;
   }*/
    //std::cout << "Done!" << std::endl;
    
    return kTRUE;
}

void TopAnalysis::SlaveTerminate()
{
  // The SlaveTerminate() function is called after all entries or objects
  // have been processed. When running with PROOF SlaveTerminate() is called
  // on each slave server.
}

void TopAnalysis::Terminate()
{
  // The Terminate() function is the last function to be called during
  // a query. It always runs on the client, it can be used to present
  // the results graphically or save the results to file.

  name="output_Top/"+name+".root";

  const char* filename = name.c_str();

  TFile physicsoutput_Top(filename,"recreate");
  WriteHistograms();
  physicsoutput_Top.Close();


}
